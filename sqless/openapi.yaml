openapi: 3.0.3
info:
  title: SQLESS API
  version: 1.0.0
  description: Async SQLite + File Server API

servers:
  - url: http://127.0.0.1:12239
    description: Local server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Record:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          description: Primary key, must be unique
      additionalProperties: true

    DBResponse:
      type: object
      properties:
        suc:
          type: boolean
        data:
          type: object
          additionalProperties: true
        count:
          type: integer
        max_page:
          type: integer

    FSResponse:
      type: object
      properties:
        suc:
          type: boolean
        data:
          type: string

    XMLHttpRequestData:
      type: object
      properties:
        method:
          type: string
          example: POST
        url:
          type: string
          format: uri
        headers:
          type: object
          additionalProperties:
            type: string
          example:
            User-Agent: SQLESS-Client/1.0
            Authorization: Bearer <token>
        type:
          type: string
          enum: [form, json]
        data:
          type: object
          additionalProperties: true
        files:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              filename:
                type: string
              content_type:
                type: string
              base64:
                type: string

security:
  - BearerAuth: []

paths:
  /db/{db_table}:
    post:
      summary: Upsert a single record
      description: |
        `db_table` is `<path-name>-<table-name>` (e.g., `east-mall-user`).  
        Payload must include a unique `key`. Other fields are arbitrary.  
        If the key exists, it overwrites the record.
      parameters:
        - in: path
          name: db_table
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record'
      responses:
        '200':
          description: Upsert result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBResponse'

  /db/{db_table}/{where}:
    get:
      summary: Query table with conditions
      description: |
        `where` supports limited SQL expressions:
        - Conditions: `col op value`
        - Operators: `=`, `!=`, `<`, `>`, `<=`, `>=`, `like`, `ilike`, `is`
        - Logical connectors: `and`, `or`
        - Parentheses allowed
        - Optional `order by` clause
      parameters:
        - in: path
          name: db_table
          required: true
          schema:
            type: string
        - in: path
          name: where
          required: true
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: Query result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBResponse'

    delete:
      summary: Delete rows matching conditions
      parameters:
        - in: path
          name: db_table
          required: true
          schema:
            type: string
        - in: path
          name: where
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Delete result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DBResponse'

  /fs/{path_file}:
    get:
      summary: Download file or check existence
      parameters:
        - in: path
          name: path_file
          required: true
          schema:
            type: string
        - in: query
          name: check
          schema:
            type: string
            description: If present, only check existence
      responses:
        '200':
          description: File content (binary) or JSON (check)
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                $ref: '#/components/schemas/FSResponse'
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FSResponse'

    post:
      summary: Upload a file
      parameters:
        - in: path
          name: path_file
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Upload result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FSResponse'

  /xmlhttpRequest:
    post:
      summary: Proxy HTTP request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/XMLHttpRequestData'
      responses:
        '200':
          description: Response from proxied request
          content:
            application/json:
              schema:
                type: object
                properties:
                  suc:
                    type: boolean
                  status:
                    type: integer
                  text:
                    type: string
                  url:
                    type: string
